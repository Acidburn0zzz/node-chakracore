prefix sequential

# To mark a test as flaky, list the test name in the appropriate section
# below, without ".js", followed by ": PASS,FLAKY". Example:
# sample-test                       : PASS,FLAKY

[true] # This section applies to all platforms
# This test will be flaky until https://github.com/libuv/libuv/pull/1742 lands
# on Node.js.
test-fs-readfile-tostring-fail: PASS, FLAKY

[$system==win32]
test-inspector-async-call-stack          : PASS, FLAKY
test-inspector-async-hook-setup-at-signal:  PASS, FLAKY
test-inspector-bindings                  : PASS, FLAKY
test-inspector-debug-end                 : PASS, FLAKY

[$system==linux]

[$system==macos]

[$system==solaris] # Also applies to SmartOS

[$system==freebsd]

[$system==aix]

[$jsEngine==chakracore]
# These tests are failing for Node-Chakracore and should eventually be fixed
test-async-wrap-getasyncid : SKIP
test-inspector-async-call-stack-abort : SKIP
test-inspector-async-hook-setup-at-inspect-brk : SKIP
test-inspector-async-stack-traces-promise-then : SKIP
test-inspector-async-stack-traces-set-interval : SKIP
test-inspector-bindings : SKIP
test-inspector-break-when-eval : SKIP
test-inspector-contexts : SKIP
test-inspector-scriptparsed-context : SKIP
test-inspector-stop-profile-after-done : SKIP

[$jsEngine==chakracore && $system==win32]
# This test can fail depending on the ports that other processes are using
test-inspector-port-cluster : PASS, FLAKY

# This test seems to fail based on machine load or configuration
test-net-bytes-per-incoming-chunk-overhead : PASS, FLAKY
